{"version":3,"sources":["components/Footer/Footer.js","components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/ResultModal.js","components/util/WinnerCalculator.js","components/Game/Game.js","components/Game/GameHvC.js","components/Game/GameHvCModeEasy.js","components/Game/GameHvCModeHard.js","components/Home/man.png","components/Home/boy.png","components/Home/Home.js","components/Home/Instructions.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","props","class","className","scoreX","scoreO","Cell","cellClasses","classNames","cell","winner","canHighLignt","cellContentClasses","populated","value","onClick","id","Board","cells","cellValues","map","index","winningCombination","indexOf","xIsNext","cellClicked","ResultModal","resultModalClasses","isGameOver","message","onNewGameClicked","winningMatrix","0","1","2","3","4","5","6","7","8","CalculateWinner","numberOfTurnsLeft","cellIndex","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","Game","useState","setCellValues","setXIsNext","SetIsGameOver","SetNumberOfTurnsLeft","setWinner","setScoreX","setScoreO","setWinningCombination","restartGame","style","textAlign","margin","to","textDecoration","display","isCellEmpty","newCellValues","console","log","newNumberOfTurnsLeft","calcResult","prevScoreX","prevScoreO","GameHvC","width","GameHvCModeEasy","x","Math","floor","random","GameHvCModeHard","checkWin","board","player","plays","reduce","a","e","concat","gameWon","entries","every","elem","minimax","newBoard","availSpots","j","score","bestMove","moves","move","result","push","bestScore","newCellValues2","Home","Fragment","data-wow-duration","data-wow-delay","src","man","Instructions","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19827226.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './Footer.css';\r\n\r\n\r\n\r\nexport const  Footer = (props) => {\r\n\r\n    return (\r\n        //rodou responsive if u can o kaml estwiii\r\n        <>\r\n            <div class=\"fixed-footer\">\r\n            <i class=\"fa fa-user fa-10x left\"><span className=\"score\">X: {props.scoreX}</span></i>\r\n                \r\n            <i class=\"fa fa-user fa-10x right\" ><span className=\"score\">O: {props.scoreO}</span></i>  \r\n                                    \r\n            </div>\r\n        \r\n        </>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport classNames from 'classnames';//npm install classnames\r\n\r\nimport './Cell.css';\r\n\r\nexport const  Cell = (props) => {\r\n\r\n    const cellClasses = classNames({\r\n        cell: true, //css du cell (className)\r\n        winner: props.canHighLignt // css class tbadel loun les cellules mtaa winner\r\n    });\r\n\r\n\r\n    const cellContentClasses = classNames({\r\n        'cell-content': true, //css du contenu du cell (className)\r\n        populated: props.value // css class tbaynelna lktiba f wost cell\r\n    });\r\n\r\n  return (\r\n    <button className={cellClasses} onClick={props.onClick} id=\"test\">\r\n        <span className={cellContentClasses}>{props.value}</span>\r\n    </button>\r\n\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './Board.css';\r\n\r\nimport { Cell } from '../Cell/Cell';\r\n\r\n\r\nexport const  Board = (props) => {\r\n\r\n    const cells = props.cellValues.map((value, index) => {\r\n        const canHighLignt = props.winningCombination && \r\n                             props.winningCombination.indexOf(index) >= 0 ;\r\n\r\n       return <Cell \r\n                id={index}\r\n                key={index} \r\n                value={value} \r\n                xIsNext={props.xIsNext} \r\n                canHighLignt= {canHighLignt} \r\n                onClick={() => props.cellClicked(index)} />\r\n    });\r\n\r\n  return (\r\n    <div id=\"board\">\r\n        {cells}\r\n    </div>\r\n         \r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './ResultModal.css';\r\n\r\n\r\n\r\nexport const  ResultModal = (props) => {\r\n    const resultModalClasses = classNames({\r\n        'modal-open': props.isGameOver //w9t toufa lo3ba chtjii resultat\r\n    });\r\n\r\n    //msg ly chytl3 ki game is over\r\n    const message = props.winner ? `Winner is ${props.winner}.`: 'It is a tie'; \r\n\r\n    const resultModal= \r\n    props.isGameOver ?\r\n        <div id=\"modal-overlay\" className={resultModalClasses}>\r\n            <div id=\"game-result-modal\">\r\n                <div id=\"result-container\">\r\n                    <div id=\"winner-container\">\r\n                        <span>{message}</span>\r\n                    </div>\r\n                </div>\r\n                <div id=\"new-game-container\">\r\n                    <button \r\n                        id=\"new-game-button\"\r\n                        onClick={props.onNewGameClicked}>Start New Game\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>:\r\n        <div id=\"turn-container-parent\">\r\n            <div id=\"turn-container-child\">\r\n                <span>{props.xIsNext ? \"X turn\" :\"O turn\"}</span>\r\n            </div>\r\n        </div>\r\n    return (\r\n        resultModal\r\n    );\r\n}\r\n","//tout les combinaisons pour gagner\r\nconst winningMatrix = {\r\n    0: [[1,2],[3,6],[4,8]],\r\n    1: [[0,2],[4,7]],\r\n    2: [[0,1],[5,8],[4,6]],\r\n    3: [[0,6],[4,5]],\r\n    4: [[2,6],[3,5],[1,7],[0,8]],\r\n    5: [[3,4],[2,8]],\r\n    6: [[7,8],[0,3],[2,4]],\r\n    7: [[6,8],[1,4]],\r\n    8: [[6,7],[2,5],[0,4]]\r\n};\r\n\r\nexport const CalculateWinner = (cellValues, numberOfTurnsLeft, cellIndex) => {\r\n    const winningRanges = winningMatrix[cellIndex];\r\n\r\n    for (let i = 0; i < winningRanges.length; i++){\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n        //3anna winner\r\n        if (currentValue === firstOption && firstOption === secondOption){\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            }\r\n        }\r\n    }\r\n\r\n    //mafama had rbeh o les cases kol m3amrin\r\n    if (numberOfTurnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        }\r\n    }\r\n\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    };\r\n};","import React, { useState } from 'react';\r\nimport './Game.css';\r\nimport {Link} from 'react-router-dom'\r\nimport { Footer } from '../Footer/Footer';\r\n\r\nimport { Board } from '../Board/Board';\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport { CalculateWinner } from '../util/WinnerCalculator';\r\n\r\n\r\nexport const  Game = () => {\r\n    const [cellValues, setCellValues] = useState(['','','','','','','','','']);// kaabet les cellules par defaut bch ytnahawch mn blasthom\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, SetIsGameOver] = useState (false);\r\n    const [numberOfTurnsLeft, SetNumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [scoreX, setScoreX] = useState(0);\r\n    const [scoreO, setScoreO] = useState(0);\r\n    const [winningCombination, setWinningCombination] = useState([]); //lblasa mtaa winner\r\n\r\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === ''; //bech t3awdch tbadel valeur t3 cell mara okhra\r\n\r\n    const restartGame = () => {\r\n        setCellValues(['','','','','','','','','']); \r\n        setXIsNext(true); \r\n        SetIsGameOver(false);\r\n        SetNumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    }\r\n    const handleScoreRestart=()=>{\r\n        setScoreO(0)\r\n        setScoreX(0)\r\n    }\r\n    const onCellClicked = (cellIndex) =>{\r\n        if (isCellEmpty(cellIndex)) {\r\n            const newCellValues = [...cellValues];\r\n            newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\r\n            console.log(newCellValues)\r\n            const newNumberOfTurnsLeft = numberOfTurnsLeft - 1 ;\r\n\r\n            //calculate the result\r\n            const calcResult = CalculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n            \r\n            setCellValues(newCellValues); //yhot valeur f wst cell\r\n            setXIsNext(!xIsNext); //bech yhot O\r\n            SetIsGameOver(calcResult.hasResult);\r\n            SetNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n            setWinner(calcResult.winner);\r\n            console.log(calcResult.winner)\r\n            if(calcResult.winner===\"X\"){\r\n                setScoreX(prevScoreX=>prevScoreX+1)\r\n            }\r\n            if(calcResult.winner===\"O\"){\r\n                setScoreO(prevScoreO=>prevScoreO+1)\r\n            }\r\n            setWinningCombination(calcResult.winningCombination);//chtetlawn blast winner\r\n        }\r\n    };\r\n\r\n  return (\r\n    <>  \r\n    {\r\n        !isGameOver ?     \r\n        <div style={{textAlign:\"center\",margin:\"5px 0 50px 0\"}}>\r\n            <Link to='/' style={{ textDecoration: 'none' }}>\r\n                <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                    <button \r\n                        id=\"new-game-button\"\r\n                        >Home Page\r\n                    </button>\r\n                </div>\r\n                &emsp;\r\n            </Link>\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={restartGame}>Restart\r\n                </button>\r\n            </div>\r\n            &emsp;\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={handleScoreRestart}>Restart Score\r\n                </button>\r\n            </div>\r\n        </div> :\r\n        null\r\n    }\r\n\r\n        <div id=\"game\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <Board \r\n                cellValues = {cellValues} \r\n                winningCombination = {winningCombination} \r\n                cellClicked={onCellClicked}\r\n                xIsNext={xIsNext} />\r\n        </div>\r\n        <ResultModal \r\n            isGameOver= {isGameOver} \r\n            winner = {winner} \r\n            onNewGameClicked = {restartGame}\r\n            xIsNext={xIsNext} \r\n        />\r\n        <Footer scoreO={scoreO} scoreX={scoreX} />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport '../Home/Home.css';\r\n\r\nexport const  GameHvC = (props) => {\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n           \r\n            <h1>Choose Mode</h1>\r\n            <Link to='/Human-VS-Computer-Easy' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\">\r\n                    <button id=\"new-game-button\" style={{width:\"150px\"}}>Easy</button>\r\n                </div>\r\n            </Link>\r\n            <Link to='/Human-VS-Computer-Hard' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\">\r\n                    <button id=\"new-game-button\"style={{width:\"150px\"}}>Hard</button>\r\n                </div>\r\n            </Link>\r\n            <Link to='/' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\" >\r\n                    <button id=\"new-game-button\"style={{width:\"150px\"}}><i class=\"fas fa-long-arrow-left\"></i> Go back</button>\r\n                </div>\r\n            </Link>\r\n            \r\n        </div>\r\n        </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Game.css';\r\nimport {Link} from 'react-router-dom'\r\nimport { Footer } from '../Footer/Footer';\r\n\r\nimport { Board } from '../Board/Board';\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport { CalculateWinner } from '../util/WinnerCalculator';\r\n\r\n\r\nexport const  GameHvCModeEasy = () => {\r\n    const [cellValues, setCellValues] = useState(['','','','','','','','','']);// kaabet les cellules par defaut bch ytnahawch mn blasthom\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, SetIsGameOver] = useState (false);\r\n    const [numberOfTurnsLeft, SetNumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [scoreX, setScoreX] = useState(0);\r\n    const [scoreO, setScoreO] = useState(0);\r\n    const [winningCombination, setWinningCombination] = useState([]); //lblasa mtaa winner\r\n\r\n    const isCellEmpty = (cellIndex) => \r\n        cellValues[cellIndex] === ''; //bech t3awdch tbadel valeur t3 cell mara okhra\r\n\r\n    const restartGame = () => {\r\n        setCellValues(['','','','','','','','','']); \r\n        setXIsNext(true); \r\n        SetIsGameOver(false);\r\n        SetNumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    }\r\n    const handleScoreRestart=()=>{\r\n        setScoreO(0)\r\n        setScoreX(0)\r\n    }\r\n    const onCellClicked = (cellIndex) =>{\r\n        if (isCellEmpty(cellIndex)) {\r\n            const newCellValues = [...cellValues];\r\n\r\n            newCellValues[cellIndex] ='X';\r\n            let newNumberOfTurnsLeft = numberOfTurnsLeft - 1 ;\r\n            let calcResult = CalculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n                if(calcResult.hasResult){\r\n                    setCellValues(newCellValues); //yhot valeur f wst cell\r\n                    SetIsGameOver(calcResult.hasResult);\r\n                    setWinner(calcResult.winner);\r\n                    if(calcResult.winner===\"X\"){\r\n                        setScoreX(prevScoreX=>prevScoreX+1)\r\n                    }\r\n                    if(calcResult.winner===\"O\"){\r\n                        setScoreO(prevScoreO=>prevScoreO+1)\r\n                    }\r\n                    return\r\n                }\r\n\r\n            let ran=null;\r\n            const x=cellIndex\r\n            do{\r\n                ran=Math.floor(Math.random() * 9); \r\n                cellIndex=ran\r\n            }while(!isCellEmpty(cellIndex)|| cellIndex===x)\r\n\r\n            newCellValues[cellIndex] ='O';\r\n            newNumberOfTurnsLeft = numberOfTurnsLeft - 1 ;\r\n\r\n            //calculate the result\r\n            calcResult = CalculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n            if(calcResult.hasResult){\r\n                setCellValues(newCellValues); //yhot valeur f wst cell\r\n                SetIsGameOver(calcResult.hasResult);\r\n                setWinner(calcResult.winner);\r\n                if(calcResult.winner===\"X\"){\r\n                    setScoreX(prevScoreX=>prevScoreX+1)\r\n                }\r\n                if(calcResult.winner===\"O\"){\r\n                    setScoreO(prevScoreO=>prevScoreO+1)\r\n                }\r\n                return\r\n            }\r\n            if(newNumberOfTurnsLeft===5){\r\n                setCellValues(newCellValues); //yhot valeur f wst cell\r\n                setWinner(undefined);\r\n                SetIsGameOver(true);\r\n                return\r\n\r\n            }\r\n\r\n            \r\n            setCellValues(newCellValues); //yhot valeur f wst cell\r\n            SetIsGameOver(calcResult.hasResult);\r\n            SetNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n            setWinner(calcResult.winner);\r\n            if(calcResult.winner===\"X\"){\r\n                setScoreX(prevScoreX=>prevScoreX+1)\r\n            }\r\n            if(calcResult.winner===\"O\"){\r\n                setScoreO(prevScoreO=>prevScoreO+1)\r\n            }\r\n            setWinningCombination(calcResult.winningCombination);//chtetlawn blast winner\r\n\r\n\r\n        }\r\n    };\r\n\r\n    \r\n  return (\r\n    <>  \r\n    {\r\n        !isGameOver ?     \r\n        <div style={{textAlign:\"center\",margin:\"5px 0 50px 0\"}}>\r\n            <Link to='/' style={{ textDecoration: 'none' }}>\r\n                <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                    <button \r\n                        id=\"new-game-button\"\r\n                        >Home Page\r\n                    </button>\r\n                </div>\r\n                &emsp;\r\n            </Link>\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={restartGame}>Restart\r\n                </button>\r\n            </div>\r\n            &emsp;\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={handleScoreRestart}>Restart Score\r\n                </button>\r\n            </div>\r\n        </div> :\r\n        null\r\n    }\r\n\r\n        <div id=\"game\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <Board \r\n                cellValues = {cellValues} \r\n                xIsNext={xIsNext} \r\n                winningCombination = {winningCombination} \r\n                cellClicked={onCellClicked} />\r\n        </div>\r\n        <ResultModal \r\n            isGameOver= {isGameOver} \r\n            winner = {winner} \r\n            onNewGameClicked = {restartGame}\r\n            xIsNext={xIsNext} \r\n        />\r\n        <Footer scoreO={scoreO} scoreX={scoreX} />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './Game.css';\r\nimport {Link} from 'react-router-dom'\r\nimport { Footer } from '../Footer/Footer';\r\n\r\nimport { Board } from '../Board/Board';\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport { CalculateWinner } from '../util/WinnerCalculator';\r\n\r\n\r\nexport const  GameHvCModeHard = () => {\r\n    const [cellValues, setCellValues] = useState(['','','','','','','','','']);// kaabet les cellules par defaut bch ytnahawch mn blasthom\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, SetIsGameOver] = useState (false);\r\n    const [numberOfTurnsLeft, SetNumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [scoreX, setScoreX] = useState(0);\r\n    const [scoreO, setScoreO] = useState(0);\r\n    const [winningCombination, setWinningCombination] = useState([]); //lblasa mtaa winner\r\n    const [availSpots, setAvailSpots] = useState([]); //lblasa mtaa winner\r\n\r\n\r\n    function checkWin(board, player) {\r\n        const winCombos = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [6, 4, 2]\r\n        ]\r\n        \r\n        let plays = board.reduce((a, e, i) =>\r\n            (e === player) ? a.concat(i) : a, []);\r\n        let gameWon = null;\r\n        for (let [index, win] of winCombos.entries()) {\r\n            if (win.every(elem => plays.indexOf(elem) > -1)) {\r\n                gameWon = {index: index, player: player};\r\n                break;\r\n            }\r\n        }\r\n        return gameWon;\r\n    }\r\n\r\n\r\n\r\n    const minimax=(newBoard, player) =>{\r\n\r\n        const availSpots=[]\r\n        let j=0\r\n        for (var i = 0; i < newBoard.length; i++) {\r\n            if(newBoard[i]!=='X'&&newBoard[i]!=='O'){\r\n                availSpots[j]=i;\r\n                j++\r\n            }\r\n        }\r\n        if (checkWin(newBoard, \"X\")) {\r\n            return {score: -10};\r\n        } else if (checkWin(newBoard, \"O\")) {\r\n            return {score: 10};\r\n        } else if (availSpots.length === 0) {\r\n            return {score: 0};\r\n        }\r\n        var moves = [];\r\n        for (var i = 0; i < availSpots.length; i++) {\r\n            var move = {};\r\n            move.index = newBoard[availSpots[i]];\r\n            newBoard[availSpots[i]] = player;\r\n    \r\n            if (player === \"O\") {\r\n                var result = minimax(newBoard, \"X\");\r\n                move.score = result.score;\r\n            } else {\r\n                var result = minimax(newBoard, \"O\");\r\n                move.score = result.score;\r\n            }\r\n    \r\n            newBoard[availSpots[i]] = move.index;\r\n    \r\n            moves.push(move);\r\n        }\r\n    \r\n        var bestMove;\r\n        if(player === 'O') {\r\n            var bestScore = -10000;\r\n            for(var i = 0; i < moves.length; i++) {\r\n                if (moves[i].score > bestScore) {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        } else {\r\n            var bestScore = 10000;\r\n            for(var i = 0; i < moves.length; i++) {\r\n                if (moves[i].score < bestScore) {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return moves[bestMove];\r\n    }\r\n    \r\n\r\n    const isCellEmpty = (cellIndex) => \r\n        cellValues[cellIndex] === ''; //bech t3awdch tbadel valeur t3 cell mara okhra\r\n\r\n    const restartGame = () => {\r\n        setCellValues(['','','','','','','','','']); \r\n        setXIsNext(true); \r\n        SetIsGameOver(false);\r\n        SetNumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    }\r\n    const handleScoreRestart=()=>{\r\n        setScoreO(0)\r\n        setScoreX(0)\r\n    }\r\n    const onCellClicked = (cellIndex) =>{\r\n        if (isCellEmpty(cellIndex)) {\r\n            const newCellValues = [...cellValues];\r\n\r\n            newCellValues[cellIndex] ='X';\r\n            let newNumberOfTurnsLeft = numberOfTurnsLeft - 1 ;\r\n            let calcResult = CalculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n                if(calcResult.hasResult){\r\n                    setCellValues(newCellValues); //yhot valeur f wst cell\r\n                    SetIsGameOver(calcResult.hasResult);\r\n                    setWinner(calcResult.winner);\r\n                    if(calcResult.winner===\"X\"){\r\n                        setScoreX(prevScoreX=>prevScoreX+1)\r\n                    }\r\n                    if(calcResult.winner===\"O\"){\r\n                        setScoreO(prevScoreO=>prevScoreO+1)\r\n                    }\r\n                    return\r\n                }\r\n\r\n            let ran=null;\r\n            const x=cellIndex\r\n            do{\r\n                ran=Math.floor(Math.random() * 9); \r\n                cellIndex=ran\r\n            }while(!isCellEmpty(cellIndex)|| cellIndex===x)\r\n            const newCellValues2=[...newCellValues]\r\n            for (var i = 0; i < newCellValues2.length; i++){\r\n                if(newCellValues2[i]===''){\r\n                    newCellValues2[i]=i\r\n                    console.log(\"hi\")\r\n                }\r\n            }\r\n            console.log(newCellValues2)\r\n            console.log(minimax(newCellValues2,'O'))\r\n\r\n            newCellValues[minimax(newCellValues2,'O').index]='O';\r\n            console.log(newCellValues)\r\n\r\n            newNumberOfTurnsLeft = numberOfTurnsLeft - 1 ;\r\n\r\n            //calculate the result\r\n            calcResult = CalculateWinner(newCellValues, newNumberOfTurnsLeft, minimax(newCellValues2,'O').index);\r\n            if(calcResult.hasResult){\r\n                setCellValues(newCellValues); //yhot valeur f wst cell\r\n                SetIsGameOver(calcResult.hasResult);\r\n                setWinner(calcResult.winner);\r\n                if(calcResult.winner===\"X\"){\r\n                    setScoreX(prevScoreX=>prevScoreX+1)\r\n                }\r\n                if(calcResult.winner===\"O\"){\r\n                    setScoreO(prevScoreO=>prevScoreO+1)\r\n                }\r\n                return\r\n            }\r\n            if(newNumberOfTurnsLeft===5){\r\n                setCellValues(newCellValues); //yhot valeur f wst cell\r\n                setWinner(undefined);\r\n                SetIsGameOver(true);\r\n                return\r\n\r\n            }\r\n\r\n            \r\n            setCellValues(newCellValues); //yhot valeur f wst cell\r\n            SetIsGameOver(calcResult.hasResult);\r\n            SetNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n            setWinner(calcResult.winner);\r\n            if(calcResult.winner===\"X\"){\r\n                setScoreX(prevScoreX=>prevScoreX+1)\r\n            }\r\n            if(calcResult.winner===\"O\"){\r\n                setScoreO(prevScoreO=>prevScoreO+1)\r\n            }\r\n            setWinningCombination(calcResult.winningCombination);//chtetlawn blast winner\r\n\r\n\r\n        }\r\n    };\r\n\r\n    \r\n  return (\r\n    <>  \r\n    {\r\n        !isGameOver ?     \r\n        <div style={{textAlign:\"center\",margin:\"5px 0 50px 0\"}}>\r\n            <Link to='/' style={{ textDecoration: 'none' }}>\r\n                <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                    <button \r\n                        id=\"new-game-button\"\r\n                        >Home Page\r\n                    </button>\r\n                </div>\r\n                &emsp;\r\n            </Link>\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={restartGame}>Restart\r\n                </button>\r\n            </div>\r\n            &emsp;\r\n            <div id=\"back-home-container\" style={{display:\"inline\"}}>\r\n                <button \r\n                    id=\"new-game-button\"\r\n                    onClick={handleScoreRestart}>Restart Score\r\n                </button>\r\n            </div>\r\n        </div> :\r\n        null\r\n    }\r\n\r\n        <div id=\"game\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <Board \r\n                cellValues = {cellValues} \r\n                xIsNext={xIsNext} \r\n                winningCombination = {winningCombination} \r\n                cellClicked={onCellClicked} />\r\n        </div>\r\n        <ResultModal \r\n            isGameOver= {isGameOver} \r\n            winner = {winner} \r\n            onNewGameClicked = {restartGame}\r\n            xIsNext={xIsNext} \r\n        />\r\n        <Footer scoreO={scoreO} scoreX={scoreX} />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/man.9a376f3a.png\";","export default __webpack_public_path__ + \"static/media/boy.392b9a55.png\";","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport boy from './boy.png';\r\nimport man from './man.png';\r\n//import back from './back.png';\r\n\r\nimport './Home.css';\r\n\r\nexport const  Home = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div >\r\n\r\n            <h1 className=\" homeh1 wow fadeInDown\"data-wow-duration=\"2s\" data-wow-delay=\".5s\" >Tic Tac Toe</h1>\r\n            \r\n            <Link to='/Human-VS-Humain' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\" className=\" wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".5s\">\r\n                    <button id=\"new-game-button\" style={{width:\"150px\"}}><i class=\"fa fa-user\"></i> vs <i class=\"fa fa-user\"></i></button>\r\n                    \r\n                </div>\r\n            </Link>\r\n            \r\n            <Link to='/Human-VS-Computer' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\" className=\" wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".6s\">\r\n                    <button id=\"new-game-button\"style={{width:\"150px\"}}><i class=\"fa fa-user\"></i> vs <i class=\"fa fa-robot\"></i></button>\r\n                </div>\r\n            </Link>\r\n            <Link to='/Instructions' style={{ textDecoration: 'none' }}>\r\n                <div id=\"new-game-container\"  className=\" wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".7s\">\r\n                    <button id=\"new-game-button\"style={{width:\"150px\"}}>Instructions</button>\r\n                </div>\r\n            </Link>\r\n            \r\n        </div>\r\n        <img className=\"wow rotateIn\" data-wow-duration=\"3s\" data-wow-delay=\".9s\"src={man} width=\"300px\"/>\r\n        </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nexport const  Instructions = (props) => {\r\n\r\n    return (\r\n        <>\r\n        <div id =\"game\" className=\"inst\">\r\n            <h1>Rules</h1>\r\n            \r\n                <ul>\r\n                    <li className=\" wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".5s\"> 1. The game is played on a grid that's 3 squares by 3 squares.</li> \r\n\r\n                    <li className=\" wow fadeInRight\"  data-wow-duration=\"3s\" data-wow-delay=\".6s\"> 2. You are <span className=\"st\">X</span>, your friend or the computer is <span className=\"st\">O</span>. Players take turns putting their marks in empty squares.</li> \r\n\r\n                    <li className=\"wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".7s\"> 3. The first player to get 3 of her marks in a row (up, down, across, or diagonally) is the winner.</li> \r\n\r\n                    <li className=\" wow fadeInRight\"  data-wow-duration=\"3s\" data-wow-delay=\".8s\">4. When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.</li> \r\n                </ul>\r\n                <Link to='/' style={{ textDecoration: 'none' }}>\r\n                    <div id=\"new-game-container\" className=\" wow fadeInLeft\"  data-wow-duration=\"3s\" data-wow-delay=\".6s\">\r\n                        <button id=\"new-game-button\"style={{width:\"150px\"}}>Let's play</button>\r\n                    </div>\r\n                </Link>\r\n        </div>\r\n        </>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport {BrowserRouter,Switch,Route} from 'react-router-dom'\r\n\r\nimport { Game } from './components/Game/Game';\r\nimport { GameHvC } from './components/Game/GameHvC';\r\n\r\nimport {GameHvCModeEasy} from './components/Game/GameHvCModeEasy';\r\n\r\nimport {GameHvCModeHard} from './components/Game/GameHvCModeHard'\r\n\r\n\r\n\r\nimport {Home} from './components/Home/Home'\r\nimport { Instructions } from './components/Home/Instructions';\r\n\r\nfunction App() {\r\n    return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/Human-VS-Humain\" component={Game}></Route>\r\n          <Route exact path=\"/Human-VS-Computer\" component={GameHvC}></Route> \r\n          <Route exact path=\"/Human-VS-Computer-Easy\" component={GameHvCModeEasy}></Route> \r\n          \r\n          <Route exact path=\"/Human-VS-Computer-Hard\" component={GameHvCModeHard}></Route> \r\n\r\n          <Route exact path=\"/Instructions\" component={Instructions}></Route> \r\n        </Switch>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}